class Bartender
{
  private op void wait();
  
  /**
   * Prepares a drink by fetching appropriate ingredients and mixing!
   */
  public Drink prepare(Drink drink)
  {
    if (drink == Drink.BEER)
    {
      Logger.emote(this + " trying to acquire glass");
      receive Bardisk.glass();
      
      receive Bardisk.beer_tap();
      Logger.emote(this + " fixing beer*");
      
      Pub.clock().setAlarm(wait, Delays.MIX_DRINK);
      receive wait();
      
      Logger.emote(this + " returning beer tap");
      send Bardisk.beer_tap();
    }
    else
    {
      boolean coffee = drink == Drink.COFFEE;
      
      Logger.emote(this + " trying to acquire milk");
      receive Bardisk.milk();
      if (coffee) receive Bardisk.coffee();
      else receive Bardisk.chocolate();

      Pub.clock().setAlarm(wait, Delays.GET_RESOURCE);
      receive wait();
      
      Logger.emote(this + " trying to acquire cup");
      receive Bardisk.cup();
      
      Logger.emote(this + " mixing " + drink + "*");
      
      Pub.clock().setAlarm(wait, Delays.MIX_DRINK);
      receive wait();
      
      Logger.log(this + " returning milk and coffee/chocolate powder");
      send Bardisk.milk();
      if (coffee) send Bardisk.coffee();
      else send Bardisk.chocolate();
    }
    
    Logger.emote(this + " sending out " + drink);
    
    return drink;
  }
}
