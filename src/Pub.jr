public class Pub implements Runnable
{
  private Table[] tables;
  public static final int TABLES = 1;

  public static void main(String[] args)
  { Pub.getInstance().run(); }
  
  // Almighty timeâ€¦ read only for safety against time paradox!
  public static int time_per_tick = 1;
  private static Clock watch;
  public static Clock clock()
  { return watch; }
  
  /**
   * Retrieve the Pub instance, or create a new one if one does not
   * already exist!
   */
  public static Pub instance;
  public static Pub getInstance()
  {
    if (instance == null) instance = new Pub();
    return instance;
  }
  
  // Set simulation time!
  public MyTime end_of_the_universe = new MyTime(1, 0, 0);
  public Pub()
  {
    watch = new Clock(time_per_tick, end_of_the_universe); // Run for an hour
    watch.setAlarmEndTime(closing_time);
    
    tables = new Table[TABLES];
    for(int i=0; i<TABLES; i++){
      tables[i] = new Table();
    }
  }
  
  // Population control
  public op void hello();
  public op void goodbye();
  
  public op void last_orders();
  public op Drink order_drink(Drink drink);
  public op void remove_tables();
  
  // Have the pub closed (read-only)?
  private boolean closed = false;
  public static boolean closed() { return Pub.getInstance().closed; }
  private op void closing_time()
  { closed = true; }
  
  public Table get_table (int id){
    return tables[id];
  }
  
  /**
   * Runs the simulation!
   */
  public void run()
  {
    // For code readability
    Pub pub = this;
    
    new Landlord();
    new Barmaid();
    new Assistant();
    
    for (int i = 0; i < 5; ++i)
      Customer.enters(pub);
  }
}
