public class Pub
{
  private static Table[] tables;
  public static final int TABLES = 10;

  public static void main(String[] args)
  { Pub.run(); }
  
  // Almighty timeâ€¦ read only for safety against time paradox!
  public static int time_per_tick = 1;
  private static Clock watch;
  public static Clock clock()
  { return watch; }
  
  // Population control
  public static op void hello();
  public static op void goodbye();
  
  public static op void last_orders();
  public static op Drink order_drink(Drink drink);
  public static op void exit();
  public static op void try_spawn_customer();
  
  // Have the pub closed (read-only)?
  private static boolean closed = false;
  public static boolean closed() { return Pub.closed; }
  private static op void closing_time()
  { closed = true; }
  
  public static Table get_table (int id){
    return tables[id];
  }
  
  /**
   * Runs the simulation!
   */
  public static void run()
  {
    watch = new Clock(time_per_tick, Delays.CLOSING_TIME);
    watch.setAlarmEndTime(closing_time);
    
    tables = new Table[TABLES];
    for(int i=0; i<TABLES; tables[i++] = new Table());
    
    new Statistics();
    new Landlord();
    new Barmaid();
    new Assistant();

    int spawns = 0;
    double spawn_chance = 0.1;    
    while ( ! closed)
    {
      // Every 1 minutes we try spawning a customer with an increasing chance
      clock().setAlarm(try_spawn_customer, new MyTime(60));
      
      receive try_spawn_customer();
      if (Math.random() < spawn_chance)
      {
        spawns++;
        spawn_chance = 0.1;
        Customer.enters();
      }
      else spawn_chance += 0.05;
    }
    
    Logger.log("Totally spawned customers: " + spawns);
  }
}
